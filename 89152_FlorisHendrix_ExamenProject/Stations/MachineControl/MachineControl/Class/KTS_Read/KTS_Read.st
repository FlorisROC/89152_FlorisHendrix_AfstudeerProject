//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "KTS_Read"
	Revision           = "0.0"
	GUID               = "{ABCCEA66-D889-4046-967A-21BBED81E930}"
	RealtimeTask       = "true"
	DefRealtime        = "10 ms"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(624,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{8BC82379-624D-481C-A9C4-3AE71B477BA1}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sReadJob" GUID="{0C2EA99D-7976-4C28-A538-316EDC64FFE5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sRetcode" GUID="{DD25F051-75D8-43A5-9A15-BAB9BB3E4EDF}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sTeach2Points" GUID="{DC2DB47C-CF65-433B-B49B-C750F1B5C8C1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sTeachCommand" GUID="{9299867D-E504-4535-BD6E-94D83FA3326F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sTeachDynamic" GUID="{C6964D84-343F-4421-968C-658DD9BE5059}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sTeachStart" GUID="{595792B4-16D7-45F7-A9A4-A3122959F027}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="coCSVFile" Required="true" Internal="false"/>
		<Client Name="SDCI_Device" Required="true" Internal="false"/>
		<Client Name="SDCI_Device_Async" Required="true" Internal="false"/>
		<Client Name="StringProductName" Required="true" Internal="true"/>
		<Client Name="StringVendorName" Required="true" Internal="true"/>
	</Channels>
	<Network Name="KTS_Read">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "StringProductName"
				GUID       = "{47EDC01D-F139-43DB-B65A-B446B2E4209D}"
				Class      = "StringRAM"
				Position   = "(180,840)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "StringVendorName"
				GUID       = "{03512F88-68AF-4DB8-8E0F-EE8CEE141D24}"
				Class      = "StringRAM"
				Position   = "(180,630)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.StringVendorName" Destination="StringVendorName.Data"/>
			<Connection Source="this.StringProductName" Destination="StringProductName.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
KTS_Read : CLASS
	TYPE
#pragma pack(push, 1)
	  UDT_KTS_Colors : STRUCT
	    Color_Red : UINT;
	    Color_Green : UINT;
	    Color_Blue : UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  UDT_KTS_Color_Switch : STRUCT
	    Switch_Red : BYTE;
	    Switch_Green : BYTE;
	    Switch_Blue : BYTE;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  UDT_JobData : STRUCT
	    jd_00_Version : UINT;
	    jd_TeachLight : UDT_KTS_Colors;
	    jd_TeachDark : UDT_KTS_Colors;
	    jd_Switching_threshold : UDT_KTS_Colors;
	    jd_LD_Switches : UDT_KTS_Color_Switch;
	    jd_23_Emission_Color_KT : BYTE;
	    jd_24_Intensification_Setting_TeachIn : BYTE;
	    jd_25_Threshold_Adjustment : BYTE;
	    jd_26_Teach_Mode : BYTE;
	    jd_27_Reserved : BYTE;
	    jd_28_EmisionColor : BYTE;
	    jd_29_Switchpoint_logic : BYTE;
	    jd_30_Switchpoint_mode : BYTE;
	    jd_31_Sensitivity : BYTE;
	    jd_32_Threshold_adjustment : BYTE;
	    jd_33_Process_quality_alarm_threshold : BYTE;
	  END_STRUCT;
#pragma pack(pop)
	  UDT_KTS_TeachCommand :  //! <Type Public="true" Name="UDT_KTS_TeachCommand"/>
	  (
	    teach_1_Point_CS:=65,
	    teach_2_Points_KT_1:=67,
	    teach_2_points_KT_2:=68,
	    teach_Dynamic_KT_Start:=71,
	    teach_Dynamic_KT_Stop:=72,
	    teach_JobRead:=209
	  )$UDINT;
	  UDT_ReadJob :
	  (
	    ReadJob_Idle,
	    ReadJob_Init,
	    ReadJob_Start,
	    ReadJob_Wait,
	    ReadJob_Finish
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	sRetcode 	: SvrCh_t_SDCIRetCode_PTofCls_SdiasSDCIMaster;
	sTeachStart 	: SvrCh_DINT;
	sTeachCommand 	: SvrCh_UDT_KTS_TeachCommand_PTofCls_KTS_Read;
	sTeachDynamic 	: SvrCh_DINT;
	sTeach2Points 	: SvrCh_DINT;
	sReadJob 	: SvrCh_DINT;
  //Clients:
	SDCI_Device 	: CltChCmd_SDCIDevice;
	SDCI_Device_Async 	: CltChCmd_SDCIDevice_AsyncPara;
	StringVendorName 	: CltChCmd_StringRAM;
	StringProductName 	: CltChCmd_StringRAM;
	coCSVFile 	: CltChCmd_FileBaseCsv;
  //Variables:
		vParamUINT8 	: UINT;
		vJobReadState 	: UDT_ReadJob;
		vJobData 	: UDT_JobData;
		vCsvHandle 	: DINT;
		TxtLine : ARRAY [0..255] OF CHAR;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RtWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION ReadJob;
	
	FUNCTION CallBackReadJob
		VAR_INPUT
			pThis 	: pVoid;
			AsyState 	: SdiasSDCIMaster::t_SDCIRetCode;
			LengthOfData 	: USINT;
			pData 	: ^USINT;
		END_VAR;
	
	FUNCTION Swap2Bytes
		VAR_INPUT
			uiValue 	: UINT;
		END_VAR
		VAR_OUTPUT
			uiRetVal 	: UINT;
		END_VAR;
	
	FUNCTION SwapColors
		VAR_INPUT
			ColorsIn 	: UDT_KTS_Colors;
		END_VAR
		VAR_OUTPUT
			ColorsOut 	: UDT_KTS_Colors;
		END_VAR;
	
	FUNCTION WriteCsvFile;
	
	FUNCTION WriteCsvLine
		VAR_INPUT
			JobValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sTeachStart::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sTeachDynamic::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sTeach2Points::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sReadJob::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using StringRAM
#pragma usingLtd FileBaseCsv
#pragma usingLtd SDCIDevice
#pragma usingLtd SDCIDevice_AsyncPara


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB KTS_Read::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_KTS_READ
0$UINT, 0$UINT, (SIZEOF(::KTS_Read))$UINT, 
7$UINT, 5$UINT, 0$UINT, 
TO_UDINT(2039520762), "KTS_Read", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::KTS_Read.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::KTS_Read.sRetcode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4160955190), "sRetcode", 
(::KTS_Read.sTeachStart.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1945186055), "sTeachStart", 
(::KTS_Read.sTeachCommand.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1672120407), "sTeachCommand", 
(::KTS_Read.sTeachDynamic.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2798348343), "sTeachDynamic", 
(::KTS_Read.sTeach2Points.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(372580240), "sTeach2Points", 
(::KTS_Read.sReadJob.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3062861310), "sReadJob", 
//Clients:
(::KTS_Read.SDCI_Device.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1372521186), "SDCI_Device", TO_UDINT(205726265), "SDCIDevice", 1$UINT, 9$UINT, 
(::KTS_Read.SDCI_Device_Async.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1886387860), "SDCI_Device_Async", TO_UDINT(1321842971), "SDCIDevice_AsyncPara", 1$UINT, 4$UINT, 
(::KTS_Read.StringVendorName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2329940781), "StringVendorName", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::KTS_Read.StringProductName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(327769282), "StringProductName", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::KTS_Read.coCSVFile.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(575656003), "coCSVFile", TO_UDINT(3416595442), "FileBaseCsv", 0$UINT, 12$UINT, 
END_FUNCTION


#define USER_CNT_KTS_Read 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_KTS_Read] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION KTS_Read::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_KTS_Read, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	vmt.CmdTable.RtWork		:= #RtWork();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sTeachStart.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sTeachStart::Write() );
	IF sTeachStart.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sTeachCommand.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sTeachCommand.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sTeachDynamic.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sTeachDynamic::Write() );
	IF sTeachDynamic.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sTeach2Points.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sTeach2Points::Write() );
	IF sTeach2Points.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sReadJob.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sReadJob::Write() );
	IF sReadJob.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL KTS_Read::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  ReadJob();

  state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::RtWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  state := READY;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::Init
if _FirstScan then
  vParamUINT8 := 0;
  sRetcode := SDCI_Device.SetAsyPara(ParaIndex:=0x44, ParaSubIndex:=0, WriteDataLength:=1, pWriteData:=#vParamUINT8);
end_if;
END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::sTeachStart::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	sTeachStart := input;
  if sTeachStart = 1 then
    SDCI_Device.SetAsyPara(ParaIndex:=2, ParaSubIndex:=0, WriteDataLength:=1, pWriteData:=#sTeachCommand);
  end_if;
	result := sTeachStart;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::sTeachDynamic::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	sTeachDynamic := input;
  if sTeachDynamic = 1 then
    sTeachCommand := teach_Dynamic_KT_Start;
  else
    sTeachCommand := teach_Dynamic_KT_Stop;
  end_if;
  sTeachStart.Write(1);
  
	result := sTeachDynamic;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::sTeach2Points::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	sTeach2Points := input;
  if sTeach2Points = 1 then
    sTeachCommand := teach_2_Points_KT_1;
  else
    sTeachCommand := teach_2_Points_KT_2;
  end_if;
  sTeachStart.Write(1);  
  
	result := sTeach2Points;

END_FUNCTION

FUNCTION KTS_Read::ReadJob
  case vJobReadState of
    ReadJob_Init:
      sTeachCommand := teach_JobRead;
      sRetcode := SDCI_Device.SetAsyPara(ParaIndex:=2, ParaSubIndex:=0, WriteDataLength:=1, pWriteData:=#sTeachCommand);
      if sRetcode = SDCI_Ready_Ok then
        vJobReadState := ReadJob_Start;
      end_if;
      
    ReadJob_Start:
      sRetcode := SDCI_Device.GetAsyParaBuffered( 
          ParaIndex         := 222,
          ParaSubIndex      := 0,
          pThis             := this,
          pCallBackFunction := #CallBackReadJob());
      if sRetcode = SDCI_Ready_Ok then
        vJobReadState := ReadJob_Wait;
      end_if;
    
    ReadJob_Wait:
      
    ReadJob_Finish:
      vJobReadState := ReadJob_Idle;
        
  end_case;
END_FUNCTION


FUNCTION KTS_Read::CallBackReadJob
	VAR_INPUT
		pThis 	: pVoid;
		AsyState 	: SdiasSDCIMaster::t_SDCIRetCode;
		LengthOfData 	: USINT;
		pData 	: ^USINT;
	END_VAR
  
  THIS := pThis$^KTS_Read;
  
  if AsyState = SdiasSDCIMaster::t_SDCIRetCode::SDCI_Ready_Ok then

    if LengthOfData > 0 & pData then
            
      if LengthOfData <= sizeof(UDT_JobData) then
        _memcpy(ptr1:=#vJobData, ptr2:=pData, cntr:=LengthOfData);

        vJobData.jd_TeachLight := SwapColors(vJobData.jd_TeachLight);
        vJobData.jd_TeachDark := SwapColors(vJobData.jd_TeachDark);
        vJobData.jd_Switching_threshold := SwapColors(vJobData.jd_Switching_threshold);
      end_if;
          
    end_if;

    WriteCsvFile();
  end_if;
  vJobReadState := ReadJob_Finish;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::sReadJob::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	sReadJob := input;
  if sReadJob = 1 then
    vJobReadState := ReadJob_Init;
  end_if;
	result := sReadJob;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL KTS_Read::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

	state := READY;

END_FUNCTION


FUNCTION KTS_Read::Swap2Bytes
	VAR_INPUT
		uiValue 	: UINT;
	END_VAR
	VAR_OUTPUT
		uiRetVal 	: UINT;
	END_VAR

  uiRetVal := 0x0000;
  uiRetVal := uiRetVal OR ((uiValue AND 0x00FF) SHL 8);
  uiRetVal := uiRetVal OR ((uiValue AND 0xFF00) SHR 8);
  
END_FUNCTION


FUNCTION KTS_Read::SwapColors
	VAR_INPUT
		ColorsIn 	: UDT_KTS_Colors;
	END_VAR
	VAR_OUTPUT
		ColorsOut 	: UDT_KTS_Colors;
	END_VAR
  ColorsOut.Color_Red := Swap2Bytes(ColorsIn.Color_Red);
  ColorsOut.Color_Green := Swap2Bytes(ColorsIn.Color_Green);
  ColorsOut.Color_Blue := Swap2Bytes(ColorsIn.Color_Blue);
END_FUNCTION


FUNCTION KTS_Read::WriteCsvFile
  
  vCsvHandle := coCSVFile.OpenFile(filename:="C:\\kts\\textcsv.csv", attrib:=ATT_CREATE_ALWAYS);
 	if vCsvHandle <= 0 then
    return;
  end_if;
  
  WriteCsvLine(vJobData.jd_00_Version);
  WriteCsvLine(vJobData.jd_TeachLight.Color_Red);
  WriteCsvLine(vJobData.jd_TeachLight.Color_Green);
  WriteCsvLine(vJobData.jd_TeachLight.Color_Blue);
  WriteCsvLine(vJobData.jd_TeachDark.Color_Red);
  WriteCsvLine(vJobData.jd_TeachDark.Color_Green);
  WriteCsvLine(vJobData.jd_TeachDark.Color_Blue);
  WriteCsvLine(vJobData.jd_Switching_threshold.Color_Red);
  WriteCsvLine(vJobData.jd_Switching_threshold.Color_Green);
  WriteCsvLine(vJobData.jd_Switching_threshold.Color_Blue);
  WriteCsvLine(vJobData.jd_LD_Switches.Switch_Red);
  WriteCsvLine(vJobData.jd_LD_Switches.Switch_Blue);
  WriteCsvLine(vJobData.jd_LD_Switches.Switch_Green);
  WriteCsvLine(vJobData.jd_23_Emission_Color_KT);
  WriteCsvLine(vJobData.jd_24_Intensification_Setting_TeachIn);
  WriteCsvLine(vJobData.jd_25_Threshold_Adjustment);
  WriteCsvLine(vJobData.jd_26_Teach_Mode);
  WriteCsvLine(vJobData.jd_27_Reserved);
  WriteCsvLine(vJobData.jd_28_EmisionColor);
  WriteCsvLine(vJobData.jd_29_Switchpoint_logic);
  WriteCsvLine(vJobData.jd_30_Switchpoint_mode);
  WriteCsvLine(vJobData.jd_31_Sensitivity);
  WriteCsvLine(vJobData.jd_32_Threshold_adjustment);
  WriteCsvLine(vJobData.jd_33_Process_quality_alarm_threshold);
  
 
  coCSVFile.CloseFile(handle:=vCsvHandle);
  
END_FUNCTION


FUNCTION KTS_Read::WriteCsvLine
	VAR_INPUT
		JobValue 	: DINT;
	END_VAR
  VAR
    offset : DINT;  	
  END_VAR

  offset:= coCSVFile.BuildValue2Ascii(value:= JobValue$DINT, dest:= #TxtLine[0], offset:= 0);
  offset+= coCSVFile.BuildEol(dest:= #TxtLine[0], offset:= offset);

  coCSVFile.WriteLine(handle:= vCsvHandle, src:= #TxtLine[0], len:= offset);

END_FUNCTION



